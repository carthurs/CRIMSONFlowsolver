from __future__ import print_function
import string
import os
import buildoptions as bop
from subprocess import call
from six.moves import input
import importlib
import stat
import sys

class WorkingDir(object):
   def __init__(self, directory_to_visit):
      self.directory_to_visit = directory_to_visit

   def __enter__(self):
      self.original_directory = os.getcwd()
      os.chdir(self.directory_to_visit)
      self.directory_to_visit_full_name = os.getcwd()
      sys.path.append(self.directory_to_visit_full_name)

   def __exit__(self, type, value, tb):
      os.chdir(self.original_directory)
      sys.path.remove(self.directory_to_visit_full_name)


def createRunscript(runscript_name_to_create, relative_directory, example_runscript_name):
   with WorkingDir(relative_directory):
      raw_script_module = importlib.import_module(example_runscript_name)
      with open(runscript_name_to_create, 'w') as new_runscript_file:
         new_runscript_file.write(raw_script_module.script_raw % (bop.HOME_DIR, bop.HOME_DIR))
      os.chmod(runscript_name_to_create, 
               stat.S_IREAD | stat.S_IWRITE | stat.S_IEXEC |
               stat.S_IROTH | stat.S_IRGRP)


env = Environment(ENV = os.environ)

# Clear the incoming variables from the shell, to avoid conflicts
env.Replace(PATH = '')
env.Replace(LD_LIBRARY_PATH = '')
env.Append(LINKFLAGS = bop.PYTHON_LDMODULEFLAGS)
env.Append(LINKFLAGS = bop.PYTHON_LDMODULEFLAGS + bop.ADDITIONAL_LINKFLAGS)


env.Prepend(LIBPATH = bop.EFENCE_INCDIR)
env.Prepend(LIBS = bop.EFENCE_LIBSLIST)

env.Replace(SHELL=bop.SHELL)
env.Replace(CXX=bop.CXX)
env.Replace(CC=bop.CC)
env.Replace(F90=bop.F90)
# env.Replace(F77=bop.F77)
env.Replace(FORTRAN=bop.F90)
env.Replace(AR=bop.AR)

# Get command line invocation options to scons:
debug = int(ARGUMENTS.get('debug', 0))
profileOn = int(ARGUMENTS.get('profile',0))
bop.MAKE_WITH_PRESOLVER = int(ARGUMENTS.get('presolver', 0))
bop.sconsCleanRequested = env.GetOption('clean') # check for scons -c in command line invocation

if bop.MAKE_WITH_PRESOLVER and not bop.sconsCleanRequested:
   userResponse = raw_input("\nPresolver can be built here, but is stored in the CRIMSON GUI repository, and will be downloaded automatically from there.\n\nPlease note: if you wish to edit the presolver source, please do not do it here as your changes will be lost.\n\nIf you know what you're doing, you will be given the option to not re-pull,\nthus preserving your local changes to the Presolver for now.\n\nPlease commit your Presolver changes to its separate git repository manually, if you wish to keep them.\n\nProceed with building presolver? [y/n]").lower()
   validPositiveResponses = ['y','yes']
   validNegativeResponses = ['n','no']
   while userResponse not in (validPositiveResponses + validNegativeResponses):
      userResponse = raw_input("Please enter \'y\' or \'n\'").lower()
   if userResponse in validPositiveResponses:
      bop.MAKE_WITH_PRESOLVER = 1 # it was already equal to 1 if we got here, but set it for clarity
   elif userResponse in validNegativeResponses:
      bop.MAKE_WITH_PRESOLVER = 0 # cancel building the presolver
   else:
      raise RuntimeError("Logic error in selecting presolver build. Contact the developers.")

if bop.sconsCleanRequested:
   print("(II) Enabling all build targets to force clean...")
   enableTargetGoogleTest = 1
   bop.MAKE_WITH_POSTSOLVER = 1
   bop.MAKE_WITH_FLOWSOLVER = 1
   bop.MAKE_WITH_ESTIMATOR = 1
   bop.MAKE_WITH_PRESOLVER = 1
else:
   # Get command line invocation target options to scons:
   enableTargetGoogleTest = ARGUMENTS.get('test', 0)

if profileOn and not debug:
      print("WARNING: The user requested profiling without debug, so I'm enabling debug too.")
      debug = 1
if debug:
   env.Append(CFLAGS=['-g'])
   print("Performing debug build...")
   bop.GLOBAL_CXXFLAGS = bop.BUILDFLAGS+bop.DEBUG_FLAGS
   bop.GLOBAL_CFLAGS   = bop.BUILDFLAGS+bop.DEBUG_FLAGS
   bop.GLOBAL_FFLAGS   = bop.BUILDFLAGS+bop.DEBUG_FFLAGS
else:
   MAKE_OPTIMIZED = 1
   print("Performing optimised build...")
   bop.GLOBAL_CXXFLAGS = bop.BUILDFLAGS+bop.OPT_FLAGS
   bop.GLOBAL_CFLAGS   = bop.BUILDFLAGS+bop.OPT_FLAGS
   bop.GLOBAL_FFLAGS   = bop.BUILDFLAGS+bop.OPT_FFLAGS

if profileOn:
   env.Append(LINKFLAGS = ['-pg'])
   bop.GLOBAL_CXXFLAGS = bop.GLOBAL_CXXFLAGS + ['-pg']
   bop.GLOBAL_CFLAGS   = bop.GLOBAL_CFLAGS + ['-pg']
   bop.GLOBAL_FFLAGS   = bop.GLOBAL_FFLAGS + ['-pg']

env.Append(CFLAGS=bop.GLOBAL_CFLAGS)
env.Append(CXXFLAGS=bop.GLOBAL_CXXFLAGS)
env.Append(FFLAGS=bop.GLOBAL_FFLAGS)

env.Append(CPPFLAGS=bop.GLOBAL_DEFINES)
# env.Append(CPPFLAGS=bop.DEBUG_FLAGS)
# env.Append(CPPFLAGS=bop.OPT_FLAGS)

env.Append(CFLAGS=bop.GLOBAL_DEFINES)
# env.Append(CFLAGS=bop.DEBUG_FLAGS)
# env.Append(CFLAGS=bop.OPT_FLAGS)

env.Append(FFLAGS=bop.GLOBAL_DEFINES)
# env.Append(FFLAGS=bop.DEBUG_FFLAGS)
# env.Append(FFLAGS=bop.OPT_FFLAGS)

# env.ParseConfig("ldconfig -p")

if not bop.sconsCleanRequested:
   sourceForOverrideIdentifierTest = '''
   class Base
   {
      virtual void overrideMe(){}
   };
   class Derived : public Base
   {
      void overrideMe() override {}
   };
   int main()
   {
      return 0;
   }
   '''

   def checkCompilerSupportsCppOverrideIdentifier(context):
      context.Message('Checking for C++11 `override` identifier support...')
      result = context.TryLink(sourceForOverrideIdentifierTest,'.cpp')
      context.Result(result)
      return result

   conf = Configure(env, custom_tests={'checkCompilerSupportsCppOverrideIdentifier' : checkCompilerSupportsCppOverrideIdentifier})
   if not conf.checkCompilerSupportsCppOverrideIdentifier():
      print("No C++ `override` identifier support. Disabling")
      env.Append(CPPDEFINES=[("override","")]) # overwrite `override` with blank, because the compiler doesn't support it
   env = conf.Finish()

# Tell the C++ compiler the location of the Fortran RTL
# env.Append(LIBPATH = ['/usr/lib/gcc/x86_64-linux-gnu/4.6.3'])
# env.Append(LIBS = ['libgfortran'])

SConscript('./solverio/src/SConscript',exports='env')
if (bop.MAKE_WITH_FLOWSOLVER==1):
    SConscript('./flowsolver/src/SConscript',exports='env')
    createRunscript('mysolver', 'bin', 'mysolver_example')
if (bop.MAKE_WITH_ESTIMATOR==1):
	SConscript('./estimation/src/SConscript',exports='env')
if (bop.MAKE_WITH_PRESOLVER==1):
	SConscript('./Presolver/SConscript',exports='env')
if (bop.MAKE_WITH_POSTSOLVER==1):
	SConscript('./postsolver/src/SConscript',exports='env')
if int(enableTargetGoogleTest):
   print("including " + bop.GOOGLETEST_TOP+"/src/SConscript")
   SConscript(bop.GOOGLETEST_TOP+'/src/SConscript',exports='env')
   SConscript('./flowsolver/test/SConscript',exports='env')
   createRunscript('mytest', 'testbin', 'mytest_example')

