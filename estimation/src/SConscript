import buildoptions as bop
import string
import subprocess
import datetime
import time
import shutil

Import('env')
env_local = env.Clone()

buildVersionFile="""

#ifndef AUTOGENERATEDVERSIONNUMBER_HXX_
#define AUTOGENERATEDVERSIONNUMBER_HXX_

// This file was auto-generated during the scons process, by polling  mercurial for the code version
#include <cstdio>

void getBuildNumber(char* buildNumber)
{
	sprintf(buildNumber,"%s");
}

void getBuildTime(char* buildTimestamp)
{
	sprintf(buildTimestamp,"%s");
}

#endif
"""

def writeAutogeneratedVersionNumberHxx(target, source, env):
    try:
        versionInfo = subprocess.check_output(['hg','identify'])
    except subprocess.CalledProcessError, calledProcessError:
        print "Error calling Mercurial to get build revision tag. Is your PYTHONHOME path set and exported?"
        print calledProcessError.output
        raise
    versionInfo = versionInfo.rstrip('\n')
    # timestamp:
    buildTime = time.time()
    buildTime = datetime.datetime.fromtimestamp(buildTime).strftime('%Y-%m-%d %H:%M:%S')
    fileText = buildVersionFile % (versionInfo,buildTime)
    fileHandle = open(target[0].path, 'w')
    fileHandle.write(fileText)
    fileHandle.close()
    return 0

def cleanup(target, source, env):
    shutil.copy('estimation/src/autoGeneratedVersionNumber_dummy.hxx','estimation/src/autoGeneratedVersionNumber.hxx')

# TOP = ../..

# env_local.Append(CFLAGS=bop.GLOBAL_CFLAGS)
env_local.Append(CPPPATH=bop.MPI_INCDIR+bop.LESLIB_INCDIR+bop.SOLVERIO_INCDIR)
# env_local.Append(CXXFLAGS=bop.GLOBAL_CXXFLAGS)
env_local.Append(CPPPATH=bop.BLASLAPACK_INCDIR+bop.METIS_INCDIR+bop.FLOWSOLVER_INCDIR+bop.VERDANDI_INCDIR+bop.PETSC_INCDIR+bop.BOOSTCPP_INCDIR+bop.VTK_INCDIR+bop.LESLIB_INCDIR)
# env_local.Append(F90FLAGS=bop.GLOBAL_FFLAGS)
env_local.Append(F90PATH=bop.MPI_INCDIR+bop.LESLIB_INCDIR)

env_local.Append(LIBPATH=bop.PETSC_LIBSDIR+bop.VTK_LIBSDIR+bop.LUA_LIBSDIR+bop.FLOWSOLVER_LIBSDIR+bop.BLASLAPACK_LIBSDIR+bop.MPI_LIBSDIR+bop.SOLVERIO_LIBSDIR+bop.METIS_LIBSDIR+bop.RUNTIME_LIBSDIR+bop.LESLIB_LIBSDIR)
env_local.Prepend(LIBPATH=bop.BOOSTCPP_LIBSDIR)

env_local.Append(LIBS=bop.LUA_LIBSLIST)
env_local.Append(LIBS=bop.FLOWSOLVER_LIBSLIST)
env_local.Append(LIBS=bop.SOLVERIO_LIBSLIST)
env_local.Append(LIBS=bop.METIS_LIBSLIST)
env_local.Append(LIBS=bop.LESLIB_LIBSLIST)
env_local.Append(LIBS=bop.FLOWSOLVER_LIBSLIST)
env_local.Append(LIBS=bop.VTK_LIBSLIST)
env_local.Append(LIBS=bop.BLASLAPACK_LIBSLIST)
env_local.Append(LIBS=bop.F90_LIBS)
env_local.Append(LIBS=bop.RUNTIME_LIBSLIST)
env_local.Append(LIBS=bop.SIMVASCULAR_COMMON_LIBSLIST)
env_local.Append(LIBS=bop.PETSC_LIBSLIST)
env_local.Append(LIBS=bop.BOOSTCPP_LIBSLIST)
env_local.Append(LIBS=bop.MPI_LIBSLIST)
env_local.Append(LIBS=bop.PYTHON_LIBSLIST)
env_local.Append(LIBS=bop.BLASLAPACK_LIBSLIST)

CXXSRCS=string.split("""
	CRIMSONPython.cxx
	SimvascularGlobalArrayTransfer.cxx
	SimvascularAugStatePart.cxx
	dateTools.cxx
	""")

CXXSRCS1 = string.split("""
	ROUKF_flowsolver.cxx
	""")

CXXSRCS2 = string.split("""
	forwardandobserve.cxx
	""")

CXXSRCS3 = string.split("""
	main.cxx
	""")

OBJS0=env_local.Object(source=CXXSRCS)
OBJS1=env_local.Object(source=CXXSRCS1)
OBJS2=env_local.Object(source=CXXSRCS2)
OBJS3=env_local.Object(source=CXXSRCS3)

commonLibTarget = env_local.Library(target='libsimvascular_common.a', source=OBJS0)
estimatorTarget = env_local.Program(target='estimator', source=OBJS1)
flowsolver_and_observerTarget = env_local.Program(target='flowsolver_and_observer', source=OBJS2)
flowsolverTarget = env_local.Program(target='flowsolver', source=OBJS3)

copyCommon = env_local.Command("../../lib/libsimvascular_common.a", "./libsimvascular_common.a", Copy("$TARGET", "$SOURCE"))
copyEstimator = env_local.Command("../../bin/estimator.exe", "./estimator.exe", Copy("$TARGET", "$SOURCE"))
copyFlowsolver_and_observer = env_local.Command("../../bin/flowsolver_and_observer.exe", "./flowsolver_and_observer.exe", Copy("$TARGET", "$SOURCE"))
copyFlowsolver = env_local.Command("../../bin/flowsolver.exe", "./flowsolver.exe", Copy("$TARGET", "$SOURCE"))

# Autogenerate the build version, by polling Mercurial
generateBuildInfo = env_local.Command('autoGeneratedVersionNumber.hxx', [], Action(writeAutogeneratedVersionNumberHxx))
env_local.AlwaysBuild(generateBuildInfo)

# Cleanup command, including scrubbing of the build info that was set by generateBuildInfo
cleanupCommand = env_local.Command('cleanup',[],Action(cleanup))
# Set dependencies which much be completed before cleanup is allowed to run:
env_local.Depends(cleanupCommand,estimatorTarget)
env_local.Depends(cleanupCommand,flowsolver_and_observerTarget)
env_local.Depends(cleanupCommand,flowsolverTarget)

Default(commonLibTarget,copyCommon,estimatorTarget,flowsolver_and_observerTarget,flowsolverTarget,copyEstimator,copyFlowsolver_and_observer,copyFlowsolver,cleanupCommand)