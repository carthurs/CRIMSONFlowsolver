/*! \file python.dox
    \brief Python Interface and Visualization Example with ipython.
*/

/*!
\page python Python

\section interface Python interface
%Verdandi comes with a Python interface generated by <a href="http://www.swig.org/">Swig</a>.

This page only addresses the compilation and the use of the interface under Linux, MacOS and Windows. The generation of the interface was not tested on another platform yet. No known issue should prevent the interface from running successfully on another platform.

\subsection ipython IPython and Matplotlib (not tested under Windows)

It is recommended to use <a href="http://ipython.scipy.org/">IPython</a> (enhanced Python shell) instead of the regular Python shell, with <a href="http://matplotlib.sourceforge.net/">Matplotlib</a>, a 2D plotting library which produces high quality figures. Once installed, launch IPython's pylab mode with <code>ipython -pylab</code>. You should get the prompt

\precode
In [1]:
\endprecode

If no error occurs, you have successfully installed Matplotlib. You can try to plot some figures with the command plot.

\precode
In [1]: plot([0,1])
\endprecode

This should open a new window with the figure of a line from (0,0) to (1,1). The prompt should still be available, so you can plot other figures.

\precode
In [2]: plot([4,-1])
\endprecode

Another figure has been added, a line from (0,4) to (1,-1).

\subsection compilation Compiling the interface under Linux and MacOS

In addition to a C++ compiler, one needs Swig 1.3.x. Swig 1.1 cannot generate the interface. You will also need Python (say, 2.5 or 2.6, but previous versions should work too) and its headers.

In <code>python/</code> directory, you may simply launch <code>scons swig</code> if you have <a href="http://www.scons.org/">SCons</a> installed (version &gt;=1.0).

This should generate the Python module <code>verdandi.py</code> and the shared library <code>_verdandi.so</code>. You may want to place these two files in a directory of your <code>$PYTHONPATH</code>, where Python searches for modules.

\subsection compilationw Compiling the interface under Windows

<a href= "http://www.swig.org/">Swig</a> is available for Windows. Download the prebuild executable, and add the path to SWIG to your environment variable. Create a "New project from existing code file" in Visual. Select Visual C++ for the entry "Type of project". Specify then the location of the "python" directory in your version of Verdandi: <code>Verdandi-[version]\\python</code>, and give a name to the project. On the "Project Settings" page, select "Use external build system". Then put <code>scons</code> on the generic build command line and <code>scons -c</code> on the clean command line. Click on OK.

Then add the different library paths needed, in the entry "Library Directories" (in "Project -> Properties -> Configuration Properties -> VC++ Directories"). The default SWIG interface of Verdandi has dependencies to Python, Lua, Blas, Lapack and Cblas.

Build the solution, which will generate the Python module <code>verdandi.py</code> and the shared library <code>_verdandi.pyd</code>. You may want to place these two files in the directory of your <code>DLLs</code> in Python (by default: <code>C:\\Python\\DLLs</code>), where Python searches for modules.

\subsection seldon Seldon module under Linux and MacOS

To manipulate vectors from the Python interface, you need Seldon module. To build this module, run <code>scons</code> from <code>seldon/src</code> directory. This will build the <code>Swig</code> interface to Python:

\prescreen
$ scons
\endprescreen

<code>seldon.py</code> and <code>_seldon.so</code> have been generated. Make sure these files are in a directory of <code>$PYTHONPATH</code> to be able to launch <code>Seldon</code> Python module.

\subsection seldon2 Seldon module under Windows

Create a "New project from existing code file" in Visual. Select Visual C++ for the entry "Type of project". Specify then the location of the Seldon directory in your version of Verdandi: <code>Verdandi-[version]\\include\\seldon</code>, and give a name to the project. On the "Project Settings" page, select "Use external build system". Then put <code>scons</code> on the generic build command line and <code>scons -c</code> on the clean command line. Click on OK.

Then add the different library paths needed, in the entry "Library Directories" (in "Project -> Properties -> Configuration Properties -> VC++ Directories"). Seldon only needs a link to the Python library, so put the path to the <code>libs</code> directory of your Python installation.

Build the solution, which will generate in the Seldon directory the Python module <code>seldon.py</code> and the shared library <code>_seldon.pyd</code>. You may want to place these two files in the directory of your <code>DLLs</code> in Python (by default: <code>C:\\Python\\DLLs</code>), where Python searches for modules.

\subsection using_interface Using the interface

From <code>python/</code> directory, or from any place if <code>verdandi.py</code> and <code>_verdandi.so</code> (or <code>_verdandi.pyd</code>) are in a directory of <code>$PYTHONPATH</code> under Linux and MacOS or in Python <code>DLLs</code> directory under Windows, you may launch Python and load the module. 

\precode
$ ipython -pylab

In  [1]: import seldon
In  [2]: import verdandi

In  [3]: method = verdandi.Method()
In  [4]: method.Initialize("configuration_file.lua")

In  [5]: model = method.GetModel()
In  [6]: model.GetTime()
Out [6]: 0
\endprecode

<code>Forward()</code> can be processed either by calling the driver method or directly by calling the model method:

\precode
In  [7]: method.Forward()
In  [8]: model.GetTime()
Out [9]: 0.0015
In [10]: model.Forward()
In [11]: model.GetTime()
Out[12]: 0.0030
  
In [13]: for i in range(1008):
   ....:      model.Forward()
In [14]: model.GetTime()
Out[14]: 1.515
\endprecode

Here is an example of the computation of an analysis. You may want to check its effect by printing the state vector before and after the analysis:

\precode
In [15]: state_vector = seldon.VectorDouble()

In [16]: model.GetState(state_vector)
In [17]: state_vector.Print()
0   0

In [18]: method.Analyze()
In [19]: model.GetState(state_vector)
In [20]: state_vector.Print()
0.0272727   0.0272727
\endprecode

Here is an example of the interactivity of the high-level interface: the first element of the state vector is set to an arbitrary value:
\precode
In [21]: state_vector[0] = 0
In [22]: model.SetState(state_vector)
In [23]: model.GetState(state_vector)
In [24]: state_vector.Print()
0  0.0272727
\endprecode

*/
