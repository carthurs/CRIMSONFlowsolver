// Copyright (C) 2001-2009 Vivien Mallet
//
// This file is part of the linear-algebra library Seldon,
// http://seldon.sourceforge.net/.
//
// Seldon is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2.1 of the License, or (at your option)
// any later version.
//
// Seldon is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Seldon. If not, see http://www.gnu.org/licenses/.


(define @storage = ColMajor, RowMajor, ColSparse, RowSparse, ColSymSparse,
 RowSymSparse, ColSymPacked, RowSymPacked);

// Dense matrices.
(define @storage_full = ColMajor, RowMajor, ColSymPacked, RowSymPacked);

// Full storage, complex and real values accepted.
(define @storage_full_real_complex = ColMajor, RowMajor, ColSymPacked,
 RowSymPacked);

// Full storage, only complex accepted.
(define @storage_full_complex = );

// Blas matrices.
(define @storage_blas = ColMajor, RowMajor, ColSym, RowSym, ColSymPacked,
 RowSymPacked);

// Blas matrices, complex and real values accepted.
(define @storage_blas_real_complex = ColMajor, RowMajor, ColSym, RowSym,
 ColSymPacked, RowSymPacked);

// Blas matrices, only complex accepted.
(define @storage_blas_complex = );

// Blas matrices per category.
(define @storage_blasGE = ColMajor, RowMajor);
(define @storage_blasHE = ColHerm, RowHerm);
(define @storage_blasHP = );
(define @storage_blasSY = ColSym, RowSym);
(define @storage_blasSP = ColSymPacked, RowSymPacked);
(define @storage_blasTR = ColUpTriang, ColLoTriang, RowUpTriang, RowLoTriang);
(define @storage_blasTP = );
(define @storage_blasT = );

(define @storage_sparse = ColSparse, RowSparse, ColSymSparse, RowSymSparse);

(define @storage_rectangular = ColMajor, RowMajor, ColSparse, RowSparse);

(define @storage_rectangular_full = ColMajor, RowMajor);

(define @storage_rectangular_sparse = ColSparse, RowSparse);

(define @storage_square = ColSymSparse, RowSymSparse);

(define @storage_square_full = ColSymPacked, RowSymPacked);

(define @storage_square_sparse = ColSymSparse, RowSymSparse);

(define @real = double);

(define @complex = complexdouble);

(define @real_complex = double, complexdouble);

// Seldon objects.
(define @trans = SeldonTrans, SeldonNoTrans, SeldonConjTrans);
(define @trans+ = SeldonTrans, SeldonNoTrans, SeldonConjTrans);
(define @diag = SeldonUnit, SeldonNonUnit);
(define @uplo = SeldonUpper, SeldonLower);
(define @norm = SeldonNorm1, SeldonNormInf);
(define @conj = SeldonConj, SeldonUnconj);
(define @side = SeldonLeft, SeldonRight);

// Miscellaneous.
(define @colrow = Col, Row);
(define @ul = Up, Lo);
