/*! \file reduced_order_extended_kalman_filter.dox
    \brief Reduced Order Extended Kalman Filter.
*/

/*!
\page reduced_order_extended_kalman_filter Reduced Order Extended Kalman Filter

Verdandi provides a C++ implementation of the reduced order extended Kalman filter (ROEKF) also known as singular evolutive extended Kalman filter (SEEK).

The reduced order extended Kalman filter (ROEKF) is implemented in <code>ReducedOrderExtendedKalmanFilter.hxx</code> and <code>ReducedOrderExtendedKalmanFilter.cxx</code>. The class \link Verdandi::ReducedOrderExtendedKalmanFilter ReducedOrderExtendedKalmanFilter\endlink is a template class: <code>ReducedOrderExtendedKalmanFilter<T, ClassModel, ClassObservationManager></code>. <code>T</code> is the type of the elements to be stored (e.g. <code>double</code>), <code>ClassModel</code> is the type of the model (e.g. <code>ClampedBar<double></code>), <code>ClassObservationManager</code> is the type of the observation manager (e.g. <code>LinearObservationManager<double></code>).

A simulation with the reduced order extended Kalman filter (ROEKF) may be carried
out with the following C++ lines:

\precode
ReducedOrderExtendedKalmanFilter<real, ClampedBar<real>,
        LinearObservationManager<real> > driver; [1]

driver.Initialize(argv[1]); [2]

while (!driver.HasFinished()) [6]
{
    driver.InitializeStep(); [3]

    driver.Forward(); [4]

    driver.Analyze(); [5]
}
\endprecode

\comment
  <li> First build the \link Verdandi::ReducedOrderExtendedKalmanFilter ReducedOrderExtendedKalmanFilter\endlink driver with the construction \link Verdandi::ReducedOrderExtendedKalmanFilter::ReducedOrderExtendedKalmanFilter() ReducedOrderExtendedKalmanFilter\endlink. </li>

  <li> Then initialize the driver, the model and the observation manager, and read option keys in the configuration file with \link Verdandi::ReducedOrderExtendedKalmanFilter::Initialize(string configuration_file, bool initialize_model, bool initialize_observation_manager) Initialize(configuration_file)\endlink. This optionally computes an analysis with the model initial condition. </li>

  <li> Optionally intialize a step with \link Verdandi::ReducedOrderExtendedKalmanFilter::InitializeStep() InitializeStep()\endlink. This initializes a step for the model. </li>

  <li> Perform a step forward and propagate the state error variance with \link Verdandi::ReducedOrderExtendedKalmanFilter::Forward() Forward()\endlink. </li>

  <li> Compute the analysis with \link Verdandi::ReducedOrderExtendedKalmanFilter::Analyze() Analyze()\endlink, whenever observations are available. </li>

  <li> Compute the data assimilation until the model has finished: \link Verdandi::ReducedOrderExtendedKalmanFilter::HasFinished() HasFinished()\endlink returns true if the simulation is done, false otherwise. </li>
\endcomment


\section algorithm16 Reduced Order Extended Kalman filter algorithm

Assuming that P is of reduced rank p – typically much smaller than the dimension of the space n – the basic idea in
reduced-order ﬁltering is, in essence, to be able to manipulate covariance matrices in the factorized form
    \f[ P = LU^{-1}L^{T}, \f]

where U – in the group of invertible matrices \f$\mathcal{GL}_{p}\f$ – is of much smaller size than P \f$\in \mathcal{M}_{n}\f$ and represents the
main uncertainties in the system. What is crucial here is to be able to perform all computations on L and U
without needing to compute P.

<ol>
           <li>Prediction:
            - \f$ x_{h+1}^f = \mathcal{M}_{h}(x_{h}^{a}) + Q_{h+1}\f$<br>
           <li>Update:
            - \f$ L_{h+1} = M_{h}L_h\f$<br>
            - \f$ U_{h+1} = U_h +  (H_{h+1}L_{h+1})^T R_{h+1}^{-1} H_{h+1}L_{h+1}\f$<br>
            - \f$ x_{h+1}^a = x_{h+1}^f + L_{h+1}U_{h+1}^{-1}(H_{h+1}L_{h+1})^T R_{h+1}^{-1} (y_{h+1}-H_{h+1}x_{h+1}^f)\f$<br>
           </li>
</ol>
With: <br>
\f$x_h^f\f$ forecast state vector; <br>
\f$x_h^a\f$ analysis state vector; <br>
\f$y_h\f$ observation vector; <br>
\f$\mathcal{H}_h\f$ observation operator that maps the state space to the observation space; <br>
\f$H_h\f$ observation operator linearized at \f$x^f_h\f$; <br>
\f$Q_h\f$ model error covariance matrix; <br>
\f$R_h\f$ observational error covariance matrix; <br>
\f$\mathcal{M}_h\f$ model.


*/
