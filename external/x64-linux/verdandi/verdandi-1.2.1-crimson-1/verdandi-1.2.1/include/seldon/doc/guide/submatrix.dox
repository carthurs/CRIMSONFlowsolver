/*! \file submatrix.dox
    \brief Sub-Matrices.
*/

/*!
\page submatrix Sub-Matrices

A sub-matrix can be defined with any instance of a dense or sparse matrix. Arbitrary rows and columns may be selected.

\section declaration Declaration

Given a base matrix <code>A</code>, a sub-matrix is declared with a list of rows <code>row_list</code> and a list of columns <code>column_list</code>:

\precode
Matrix<double> A(4, 6);

Vector<int> row_list(2);
row_list(0) = 1;
row_list(1) = 2;
Vector<int> column_list(3);
column_list(0) = 0;
column_list(1) = 1;
column_list(2) = 5;

SubMatrix<Matrix<double> > SubA(A, row_list, column_list);
\endprecode

The template argument of <code>SubMatrix</code> must be the exact type of the base matrix <code>A</code>.

\section more Flexible Definition

The row and column lists can be any index list, providing the indexes refer to an existing row or column in the base matrix. The same index may appear several times in a list, and the lists do not need to be sorted. As a consequence, the sub-matrices might be used for a more general purpose than simply extracting a sub-set of the rows and columns. For example, one may swap two columns and duplicate a line:

\precode
Matrix<double> A(3, 3);
A.Fill();
cout << "Complete matrix:" << endl;
A.Print();

Vector<int> row_list(4);
row_list.Fill();
row_list(3) = 2;
Vector<int> column_list(3);
column_list(0) = 1;
column_list(1) = 0;
column_list(2) = 2;
SubMatrix<Matrix<double> > SubA(A, row_list, column_list);

cout << "Sub-matrix:" << endl;
SubA.Print();
\endprecode

will result in

\prescreen
Complete matrix:
0       1       2
3       4       5
6       7       8
Sub-matrix:
1       0       2
4       3       5
7       6       8
7       6       8
\endprescreen

\section base Relation with the Base Matrix

A sub-matrix is a light structure. It essentially stores the list of rows and columns, along with a pointer to the base matrix. When an element of the sub-matrix is accessed, the sub-matrix performs an indirection to the corresponding element in the base matrix. Hence, if the sub-matrix is modified, so will be the base matrix. This also means that the sub-matrix should not be manipulated once the base matrix is destroyed.

\section method Available Methods

For a description of all available methods, see the documentation for class Seldon::SubMatrix.

\section functions Available Functions

A sub-matrix is viewed as a matrix by %Seldon. Therefore, all generic functions that are implemented in C++ can be called, which includes:
- \link Seldon::Mlt(const Matrix<T0, Prop0, Storage0, Allocator0>& M, const Vector<T1, Storage1, Allocator1>& X, Vector<T2, Storage2, Allocator2>& Y) Mlt(M, X, Y) \endlink
- \link Seldon::Mlt(const T0 alpha, const Matrix<T1, Prop1, Storage1, Allocator1>& M, const Vector<T2, Storage2, Allocator2>& X, Vector<T3, Storage3, Allocator3>& Y) Mlt(alpha, M, X, Y) \endlink
- \link
Seldon::MltAdd(const T0 alpha, const Matrix<T1, Prop1, Storage1, Allocator1>& M, const Vector<T2, Storage2, Allocator2>& X, const T3 beta, Vector<T4, Storage4, Allocator4>& Y) MltAdd(alpha, M, X, beta, Y)
\endlink
- \link
Seldon::MltAdd(const T0 alpha, const SeldonTranspose& Trans, const Matrix<T1, Prop1, Storage1, Allocator1>& M, const Vector<T2, Storage2, Allocator2>& X, const T3 beta, Vector<T4, Storage4, Allocator4>& Y) MltAdd(alpha, Trans, M, X, beta, Y)
\endlink
- \link
Seldon::Mlt(const T0 alpha, const Matrix<T1, Prop1, Storage1, Allocator1>& A, const Matrix<T2, Prop2, Storage2, Allocator2>& B, Matrix<T3, Prop3, Storage3, Allocator3>& C) Mlt(alpha, A, B, C)
\endlink
- \link
Seldon::Mlt(const Matrix<T0, Prop0, Storage0, Allocator0>& A, const Matrix<T1, Prop1, Storage1, Allocator1>& B, Matrix<T2, Prop2, Storage2, Allocator2>& C) Mlt(A, B, C)
\endlink
- \link
Seldon::MltAdd(const T0 alpha, const Matrix<T1, Prop1, Storage1, Allocator1>& A, const Matrix<T2, Prop2, Storage2, Allocator2>& B, const T3 beta, Matrix<T4, Prop4, Storage4, Allocator4>& C) MltAdd(alpha, A, B, beta, C)
\endlink
- \link
Seldon::Add(const T0& alpha, const Matrix<T1, General, Storage1, Allocator1>& A, Matrix<T2, General, Storage2, Allocator2>& B) Add(alpha, A, B)
\endlink
- \link
Seldon::GetLU(Matrix<T0, Prop0, Storage0, Allocator0>& A) GetLU(A)
\endlink
- \link
Seldon::SolveLU(const Matrix<T0, Prop0, Storage0, Allocator0>& M, Vector<T1, Storage1, Allocator1>& Y) SolveLU(A, Y)
\endlink
- \link
Seldon::MaxAbs(const Matrix<T, Prop, Storage, Allocator>& A) MaxAbs(A)
\endlink
- \link
Seldon::Norm1(const Matrix<T, Prop, Storage, Allocator>& A) Norm1(A)
\endlink
- \link
Seldon::NormInf(const Matrix<T, Prop, Storage, Allocator>& A) NormInf(A)
\endlink

<b>Warning:</b> In the case of sub-matrices, these functions will <i>not</i> call Blas, Lapack or another external library. As a consequence, they may be slow.

\section example An Example

\includeexample{submatrix.cpp}

Output:

\prescreen
Complete matrix:
0	1	2	3	4	5	
6	7	8	9	10	11	
12	13	14	15	16	17	
18	19	20	21	22	23	
Sub-matrix:
6	7	11	
12	13	17	
Multiplied by X = [0	1	2]:
29	47	

Complete matrix:
0	1	3	6	
1	2	4	7	
3	4	5	8	
6	7	8	9	
Sub-matrix (no more symmetric):
1	4	7	
6	8	9	
Complete matrix after the sub-matrix is filled with -1:
0	-1	3	-1	
-1	2	-1	-1	
3	-1	5	-1	
-1	-1	-1	-1	
\endprescreen

*/
