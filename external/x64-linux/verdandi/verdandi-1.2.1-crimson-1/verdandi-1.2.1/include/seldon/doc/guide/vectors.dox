/*! \file vectors.dox
    \brief Full and sparse vectors.
*/

/*!
\page vectors Vectors

<h2>Definition</h2>

<p> Vectors are instances of the class <code>Vector</code>. Class <code>Vector</code> is a template class: <code>Vector&lt;T, Storage, Allocator&gt;</code>. <code>T</code> is the type of the elements to be stored (e.g. <code>double</code>). <code>Storage</code> defines how the vector is stored.  <code>Storage</code> is equal to <code>VectFull</code> by default for full vectors, you can set it to <code>VectSparse</code> for sparse vectors.  Finally, <code>Allocator</code> defines the way memory is managed. It is close to STL allocators. See the section "Allocators" for further details.  </p>

<h2>Declaration</h2>

<p> There is a default <code>Allocator</code> (see the section "Allocators") and a default <code>Storage</code> (<code>VectFull</code>). It means that these two template parameters may be omitted. Then a vector of integers may be declared thanks to the line: </p>

\precode Vector<int> V;\endprecode

<p> This defines a vector of size 0, that is to say an empty vector. To define a vector of length 5, one may write: </p>

\precode Vector<int> V(5);\endprecode

<p> Other declarations may be: </p>

\precode Vector<int, VectFull> V(10);
Vector<int> U(V); // Copy constructor.
Vector<int, VectFull, MallocAlloc<int> > V(10);
Vector<int, VectFull, NewAlloc<int> > V(10);\endprecode

<h2>Use of vectors</h2>

<p> Access to elements is achieved through the <code>operator(int)</code>, and indices start at 0: </p>

\precode Vector<int, VectFull> V(10);
V(5) = -3;
V(0) = 2 * V(5);\endprecode

<p> To display vectors, there are two convenient options: </p>

\precode
V.Print();
std::cout << V << std::endl;
\endprecode

<p> There are lots of methods that are described in the <a href="class_vector.php"> documentation</a>. One may point out:</p>

<ul>

  <li> <code>Fill</code> fills with 0, 1, 2, 3, etc. or fills the vector with a given value.</li>

  <li> <code>GetLength</code> or <code>GetSize</code> return the length of the vector.</li>

  <li> <code>Reallocate</code> resizes the vector (warning, data may be lost, depending on the allocator).</li>

  <li> <code>Resize</code> resizes the vector while keeping previous entries. </li>

  <li> <code> PushBack </code> inserts an element at the end of the vector. </li>

  <li> <code>Read</code>, <code>ReadText</code>, <code>Write</code>, <code>WriteText</code> are useful methods for input/ouput operations.</li>

</ul>

A comprehensive test of dense vectors is achieved in file <code>test/program/vector_test.cpp</code>.

<br/>

<h1> Sparse vectors </h1>

<h2>Declaration</h2>

<p> There is a default <code>Allocator</code> (see the section "Allocators"). It means that this template parameter may be omitted. Then a sparse vector of doubles may be declared thanks to the line: </p>

\precode Vector<double, VectSparse> V;\endprecode

<p> This defines a null vector, that is to say that <code> V(i) </code> will return 0 for all i.  To define a vector with 5 non-zero entries, one may write: </p>

\precode Vector<double, VectSparse> V(5);\endprecode

<p> Other declarations may be: </p>

\precode
Vector<double, VectSparse> U(V); // Copy constructor.
Vector<int, VectSparse, MallocAlloc<int> > V(10);
Vector<int, VectSparse, NewAlloc<int> > V(10);\endprecode

<h2>Use of sparse vectors</h2>

A good technique consists of modifying those vectors through methods <code>AddInteraction</code> and <code>AddInteractionRow</code>.  These methods insert (or add) the elements at the correct position, so that the row numbers are always sorted in ascending order.  You can use them as in the following example :

\precode
Vector<double, VectSparse> V;
cout << "Empty vector V = " << V << endl;
// non-null value of 1.5 at row 2
V.AddInteraction(2, 1.5);
V.AddInteraction(2, 0.8);
// now V(2) should be equal to 1.5+0.8 = 2.3
cout << "After AddInteraction, V = " << V << endl;

// AddInteractionRow for several rows to add
IVect num(2);
Vector<double> val(2);
num(0) = 1; val(0) = -0.4;
num(1) = 4; val(1) = 0.6;
V.AddInteractionRow(num, val);
cout << "After AddInteractionRow, V = " << endl << V << endl;
 \endprecode

<p>The output of this code would read :</p>

\prescreen
Empty vector V =
After AddInteraction, V = 3 2.3
AfterAddInteractionRow, V =
2 -0.4
3  2.3
5  0.6
\endprescreen

<p>You noticed that the row indices are displayed with indices beginning at 1 instead of 0, this is more convenient for debugging, or exporting datas into Matlab for example. </p>

<p>You can also use the <code>operator(int)</code> to modify directly values.</p>

\precode Vector<double, VectSparse> V;
V(5) = -3;
V(0) = 2 * V(5);\endprecode

<p>If the non-zero entry doesn't exist, it is created at the correction position as for <code>AddInteraction</code>.</p>

<p>The methods <code>Reallocate</code>, <code>Index</code> and <code>Value</code> can also be used, but they need to be used carefully and often the method <code> Assemble </code> has to be called in order to sort non-zero entries.</p>

\precode
// 3 non-zero entries
Vector<double, VectSparse> V;
// creation of 3 non-zero entries
V.Reallocate(3);
// initialization of non-zero entries with Index and Value
V.Index(0) = 1; // row number of first entry
V.Value(0) = 1.3; // value of first entry
V.Index(1) = 3;
V.Value(1) = -0.5;
V.Index(2) = 2;
V.Value(2) = 2.7;
// Here the row numbers are not sorted
// you need to call Assemble
V.Assemble();
\endprecode

In the same way, the method <code>SetData</code> can be used in conjunction with <code>Assemble</code> :

\precode
Vector<double, VectSparse> V;
IVect row(3);
Vector<double> value(3);
row(0) = 1; // row number of first entry
value(0) = 1.3; // value of first entry
row(1) = 3;
value(1) = -0.5;
row(2) = 2;
value(2) = 2.7;
// feeding V with row and value
V.SetData(value, row);
// Here the row numbers are not sorted
// you need to call Assemble
V.Assemble();
\endprecode

<p>You may notice that the method SetData empties vectors row and value.</p>

<p> There are lots of methods that are described in the <a href="class_sparse_vector.php"> documentation</a>. One may point out:</p>

<ul>

  <li> <code>Fill</code> give to non-zero entries the value 0, 1, 2, 3, etc. or a given value.</li>

  <li> <code>GetLength</code> or <code>GetSize</code> return the number of non-zero entries.</li>

 <li> <code>Read</code>, <code>ReadText</code>, <code>Write</code>, <code>WriteText</code> are useful methods for input/ouput operations.</li>

</ul>

A comprehensive test of dense vector is achieved in file <code>test/program/sparse_vector_test.cpp</code>.

*/
