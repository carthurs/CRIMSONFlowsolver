import buildoptions as bop
import string

Import('env')

env.Append(CFLAGS=bop.LESLIB_DEFS)
env.Append(CPPPATH=bop.MPI_INCDIR+bop.LESLIB_INCDIR+bop.SOLVERIO_INCDIR)
env.Append(CPPPATH=bop.BOOSTCPP_INCDIR)
env.Append(CXXFLAGS=bop.LESLIB_DEFS)
env.Append(CPPPATH=bop.PETSC_INCDIR+bop.METIS_INCDIR+bop.VTK_INCDIR)
env.Append(CPPPATH=bop.GOOGLETEST_INCDIR)
env.Append(F90FLAGS=bop.LESLIB_DEFS)
env.Append(F90PATH=bop.MPI_INCDIR+bop.LESLIB_INCDIR)

env.Append(LIBPATH=bop.BOOSTCPP_LIBSDIR)

env.Append(LIBPATH=bop.PETSC_LIBSDIR+bop.MPI_LIBSDIR+bop.METIS_LIBSDIR+bop.INTEL_LIBSDIR+bop.LESLIB_LIBSDIR)

env.Prepend(LIBS=bop.MPI_LIBSLIST)
env.Prepend(LIBS=bop.LESLIB_LIBSLIST)
env.Append(LIBS=bop.METIS_LIBSLIST+bop.INTEL_LIBSLIST)
env.Append(LIBS=bop.PETSC_LIBSLIST)

# env.Append(LIBPATH=[bop.PETSC_LIBSDIR,bop.VTK_LIBSDIR,bop.LUA_LIBSDIR,bop.FLOWSOLVER_LIBSDIR,bop.BLASLAPACK_LIBSDIR,bop.MPI_LIBSDIR,bop.SOLVERIO_LIBSDIR])
# env.Append(LIBS=[bop.PETSC_LIBSLIST])
# env.Append(LIBS=['vtkGraphics','vtkFiltering','vtkGenericFiltering','vtkIO','vtkCommon','vtksys'])
# env.Append(LIBS=[bop.LUA_LIBSLIST])
# env.Append(LIBS=[bop.FLOWSOLVER_LIBSLIST])
# env.Append(LIBS=[bop.BLASLAPACK_LIBSLIST])
# env.Append(LIBS=[bop.MPI_LIBSLIST])
# env.Append(Libs=[bop.SOLVERIO_LIBSLIST])

sources=string.split("""
	newshape.cxx
	Cinput.cxx
	input_fform.cxx
	partition.cxx
	ValType.cxx
	multidom.cxx
	fileReaders.cxx
	fileWriters.cxx
	fortranPointerManager.cxx
	debuggingToolsForCpp.cxx
	abstractBoundaryCondition.cxx
	boundaryConditionManager.cxx
	boundaryConditionFactory.cxx
	RCR.cxx
	NetlistBoundaryCondition.cxx
	NetlistCircuit.cxx
	CircuitData.cxx
	ControlSystemsManager.cxx
	ParameterController.cxx
	timers.cxx
	AtomicSubcircuitConnectionManager.cxx
	pureZeroDDriver.cxx
	Netlist3DDomainReplacement.cxx
	fileIOHelpers.cxx
	controlledCoronary.cxx
	indexShifters.cxx
	blend.cxx
	blendDrv.cxx
	Bn.cxx
	BnDrv.cxx
	En.cxx
	EnDrv.cxx
	Fn.cxx
	FnDrv.cxx
	getIntPnts.cxx
	lestools.cxx
	modeShape.cxx
	modeShapeDrv.cxx
	new_interface.cxx
	parDrv.cxx
	shp6w.c
	shphex.c
	shppyr.c
	shptet.c
	shptri.cxx
	symhex.c
	symline.cxx
	sympyr.c
	symquad.c
	symquadw.c
	symtet.c
	symtri.c
	symtripyr.c
	symwdg.c
	tmrc.cxx
	uniformP.c
	usr.cxx
	write_hessian.c
	cpp_interface.f90
	common.f90
	pointer.f90
	globalArrays.f90
	shapeTable.f90
	memLS.f90
	turbsa.f90
	perprep.f90
	local_mass.f90
	pvsqbi.f90
	boundarydata.f90
	dtn.f90
	timedata.f90
	bctint.f90
	readnblk.f90
	distmeas.f90
	vlmwsttri.f90
	stats.f90
	general_rcrbc.f90
	debuggingTools.f90
	datatypes.f90
	externalDataTools.f90
	multidomain.f90
	itrdrv.f90
	error.f90
	asadj.f90
	asbflx.f90
	asbmfg.f90
	asbnabi.f90
	asigmr.f90
	asiq.f90
	bc3diag.f90
	bc3lhs.f90
	bc3per.f90
	bc3res.f90
	bctcardio.f90
	bflux.f90
	cname.f90
	commu.f90
	ctypes.f90
	e3.f90
	e3b.f90
	e3bvar.f90
	e3dc.f90
	e3ivar.f90
	e3lhs.f90
	e3metric.f90
	e3q.f90
	e3ql.f90
	e3qvar.f90
	e3res.f90
	e3stab.f90
	e3sts.f90
	elm3keps.f90
	elmdist.f90
	elmgmr.f90
	elmStats.f90
	errsmooth.f90
	f3lhs.f90
	fillsparse.f90
	forces.f90
	ftools.f90
	genadj.f90
	genbc.f90
	genbc1.f90
	genbkb.f90
	genblk.f90
	gendat.f90
	genibc.f90
	genini.f90
	genint.f90
	genlmass.f90
	gensav.f90
	gensvb.f90
	genshp.f90
	genshpb.f90
	gensvbDef.f90
	get_a_not_hex.f90
	getdiff.f90
	gtnods.f90
	hessian.f90
	hierarchic.f90
	input.f90
	itrbc.f90
	itrPC.f90
	lesSparse.f90
	local.f90
	localy.f90
	lubksb.f90
	ludcmp.f90
	mpitools.f90
	mpoint.f90
	proces.f90
	qpbc.f90
	ramg_driver.f90
	restar.f90
	rotabc.f90
	rstatic.f90
	solfar.f90
	solvecon.f90
	timeseries.f90
	estimation_helpers.f90
	errorManagement.f90
	""")

object_list=env.Object(source=sources)

# Strip out the .mod files (not needed for linking!)
object_list_withoutDotModFiles = [x for x in object_list if x.get_suffix() == ".o"]

# Set the source and output file name ("target"):
default = env.Library(target='libsimvascular_flowsolver.a', source=object_list_withoutDotModFiles)
copyLibrary = env.Command("../../lib/libsimvascular_flowsolver.a", "./libsimvascular_flowsolver.a", Copy("$TARGET", "$SOURCE"))

# Define SCons' default action:
Default(default,copyLibrary)
