# PHASTA Version 1.5 Input File
#
#  Basic format is
#
#    Key Phrase  :  Acceptable Value (integer, double, logical, or phrase
#                                     list of integers, list of doubles )
#
# To find the Key Phrases, first look in input.config.  There you will
# find the default values for everything that is allowed to have a
# default. Some things are not allowed to default and must be entered
# in this file.  In most cases, the acceptable inputs also appear in
# the input.config file. To add acceptable inputs you should only have
# to modify:
#
#     input_asci.cc :which matches the string and translates it to the 
#                    parameter change. If it is a new parameter, you must
#                    modify:
#
#                      common.h (to carry new parameter through code)
#                      common_c.h (to carry the parameter from C to Fortran)
#     
#
# In case it is not clear by now, # allows you to comment either from the 
# beginning of the line or to the right as shown below.
#
#SOLUTION CONTROL <--- These are for your organizational clarity (not required)
#{                 <---
     Equation of State: Incompressible # sets ipress=-1 matflag(1,n)
     Number of Timesteps: 5         #replaces nsteps(1) (ntseq wired =1)
     Time Step Size: 0.001             # Delt(1)
#}
#
Print Error Indicators: True
Global Node Numbering: False
Geombc Has Observation Fields: False
Geombc Has Node Tags: False
Influx Coefficient: 0.5
#
#MATERIAL PROPERTIES
#{
     Viscosity: 0.04      
     Density: 1.06               
#}

#OUTPUT CONTROL
#{
     Number of Timesteps between Restarts: 5
#}
#
#CARDIOVASCULAR MODELING PARAMETERS
#{
	Time Varying Boundary Conditions From File: False 
    BCT Time Scale Factor: 1.0
	Number of Coupled Surfaces: 2 
	Pressure Coupling: Implicit 
#
    Heart Model: True              # Heart model 
    Aortic Surface: 2              # Inflow surface ID 
    Aortic Configuration: Serial   # Parallel # Serial
    Period: 0.8                    # Period
    Maximum Elastance: 4333.225    # Maximum elastance 
    Time to Max Elastance: 0.40    # Time to max elastance
    Time to Relax: 0.20            # Time to relax
    End Diastolic Volume: 130      # Ventricular volume at end
    Unstressed Volume: 0           # Unstressed volume
    Preload: 5333.2                # Atrial preload
    Aortic Valve: 0.1000 0.10000   # AV
    Mitral Valve: 3.9453 0.13340   # MV 
    Ventricular Resistance: 0.0005 # Time varying resistance
#    
    Systemic Model: False          # Systemic model
    Systemic Closed Loop: False    # Closed loop
    Systemic Feedback: False       # Feedback     
#    
    Number of RCR Surfaces: 1
    List of RCR Surfaces: 3                     
    RCR Values From File: True                  
#       
    Residual Control: True 
    Residual Criteria: 0.0001 
    Minimum Required Iterations: 2 
#
    Number of Surfaces which Output Pressure and Flow: 2 
    List of Output Surfaces: 2 3 
    Number of Dirichlet Surfaces Which Output Pressure and Flow: 1
    List of Dirichlet Surfaces: 2                   
#
    Number of experimental RCR Surfaces: 0
    Number of Resistance Surfaces: 0 
    Number of Impedance Surfaces: 0 
    Number of Time-varying RCR Surfaces: 0
    Number of Coronary Surfaces: 0
#    List of Coronary Surfaces:
#    Coronary Values From File: False
    Number of Surfaces which zero out in-plane tractions: 0      
    Lagrange Multipliers: False 
#
    Use Closed Loop System: False 
    Deformable Wall: False
#}

#LINEAR SOLVER
#{
     Number of Solves per Left-hand-side Formation: 1  #nupdat/LHSupd(1)
#}


#DISCRETIZATION CONTROL
#{
    Solver Type: memLS
#     Solver Type: ACUSIM
#     Solver Type: ACUSIM with P Projection
     Basis Function Order: 1                 # ipord
     Quadrature Rule on Interior: 2           #int(1)
     Quadrature Rule on Boundary: 2           #intb(1)
     Include Viscous Correction in Stabilization: True    # if p=1 idiff=1
                                                           # if p=2 idiff=2  
     Lumped Mass Fraction on Left-hand-side: 0.0           # flmpl
     Lumped Mass Fraction on Right-hand-side: 0.0          # flmpr
     Time Integration Rule: Second Order    # Second Order sets rinf next
     Time Integration Rho Infinity: 0.0     # rinf(1) Only used for 2nd order
    Flow Advection Form: Convective        # iconvflow=2
#     Flow Advection Form: Conservative       # iconvflow=1
#}
     Surface ID for Integrated Mass: 0
     Number of Force Surfaces: 1
     Surface ID's for Force Calculation: 1  

TURBULENCE MODELING PARAMETERS  
{  #                                  lines below are only read if ||| is true
	Dynamic Model Type : Standard   # adds zero to iturb       LES
        Filter Integration Rule: 1  #ifrule adds ifrule-1 to iturb LES
#	Turbulence Wall Model Type: None  #itwmod=0                RANSorLES
#	Turbulence Wall Model Type: Slip Velocity  #itwmod=1       RANSorLES
	Turbulence Wall Model Type: Effective Viscosity  #itwmod=2 RANSorLES
	Velocity Averaging Steps : 500. # wtavei= 1/this           RANSorLES
	Dynamic Model Averaging Steps : 500. # dtavei= 1/this      LES
#  negative values to the two previous entries make their value ISTEP in code
#  Anil...leave as any negative value
	Filter Width Ratio        : 3.  # fwr1                     LES
 	}
#
#
#This last one is brand new.  It allows you to construct your step 
#from elementary operations.  It works under the premise that a step is
#constructed from from a series of solves and updates.  The table goes like
#this:
#     solve flow =  0;             update flow =  1
# solve scalar 1 = 10;         update scalar 1 = 11    
# solve scalar 2 = 20;         update scalar 2 = 21    
# solve scalar 3 = 30;         update scalar 3 = 31
#              :                             :
# solve scalar n = n*10;       update scalar n = n*10+1
# solve heat     = (n+1)*10;          update T = (n+1)*10+1
#

#  Below we have an example of solving the flow with two iterations
# (solve, update, solve,update) what would have been achieve before by
# setting niter=2

#
#STEP SEQUENCE 
#{
      Step Construction  : 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 # this is the standard ten iteration
#     Step Construction  : 0 1 0 1 0 1 0 1 0 1 0 1 # this is the standard six iteration
#     Step Construction  : 0 1 0 1 0 1 0 1 0 1   # this is the standard five iteration
#     Step Construction  : 0 1 0 1 0 1 0 1   # this is the standard four iteration
#     Step Construction  : 0 1 0 1 0 1  # this is the standard three iteration
#     Step Construction  : 0 1 0 1    # this is the standard two iteration
#     Step Construction  : 0 1 0 1 0 1 0 1 0 1  
#     Step Construction  : 0 1       # this is the standard one iteration 
#      Step Construction  : 0 1 10 11
#      Step Construction  : 0 1 10 11 0 1 10 11 0 1 10 11 20 21 20 21 20 21
# This one is one Tony might like where the solver would solve the flow with 
# the first scalar (3 times with an update immediately after each solve) 
# followed by 3 successive solves of the second scalar (with an update after 
# each solve)
#


# NOTE: An update consists of adding the delta from the appropriate
# solve to the appropriate part of the Y vector, followed by
# reapplication of the boundary conditions. You have to ask for an
# update. It is not implicit that it will follow each solve.  This is to
# enable you to solve successive pieces BEFORE updating the solution as
# is sometimes convenient/necessary. Here is an example of that

#      Step Construction  : 0 1 10 20 11 21 0 1 10 20 11 21
# here we solve the flow, update the flow, solve scalar 1, solve scalar 2 (BEFORE UPDATING SCALAR 1) then update both scalars,  then repeat the process

 
#}
